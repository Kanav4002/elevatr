import { useState, useEffect } from 'react';
import { 
  XMarkIcon, 
  PrinterIcon, 
  BookmarkIcon, 
  SparklesIcon,
  ClipboardDocumentIcon 
} from '@heroicons/react/24/outline';

const InterviewQuestionsModal = ({ isOpen, onClose, questions, jobTitle, company, loading }) => {
  const [activeTab, setActiveTab] = useState('technical');
  const [copiedIndex, setCopiedIndex] = useState(null);
  const [isVisible, setIsVisible] = useState(false);

  // Handle modal animation
  useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
    } else {
      setIsVisible(false);
    }
  }, [isOpen]);

  // Handle escape key
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        handleClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden'; // Prevent background scroll
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  const handleClose = () => {
    setIsVisible(false);
    setTimeout(() => {
      onClose();
    }, 200); // Small delay for animation
  };

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      handleClose();
    }
  };

  if (!isOpen) return null;

  const tabs = [
    { 
      id: 'technical', 
      name: 'Technical', 
      icon: '⚙️', 
      color: 'blue',
      description: 'Role-specific technical skills' 
    },
    { 
      id: 'behavioral', 
      name: 'Behavioral', 
      icon: '🧠', 
      color: 'purple',
      description: 'Past experience & soft skills'
    },
    { 
      id: 'situational', 
      name: 'Situational', 
      icon: '🎯', 
      color: 'green',
      description: 'Hypothetical scenarios'
    }
  ];

  const getTabStyle = (tabId, color) => {
    const isActive = activeTab === tabId;
    const colorClasses = {
      blue: isActive 
        ? 'bg-blue-600 text-white shadow-lg shadow-blue-200' 
        : 'bg-blue-50 text-blue-700 hover:bg-blue-100 border border-blue-200',
      purple: isActive 
        ? 'bg-purple-600 text-white shadow-lg shadow-purple-200' 
        : 'bg-purple-50 text-purple-700 hover:bg-purple-100 border border-purple-200',
      green: isActive 
        ? 'bg-green-600 text-white shadow-lg shadow-green-200' 
        : 'bg-green-50 text-green-700 hover:bg-green-100 border border-green-200'
    };
    return colorClasses[color];
  };

  const copyQuestion = async (question, index) => {
    try {
      await navigator.clipboard.writeText(question);
      setCopiedIndex(index);
      setTimeout(() => setCopiedIndex(null), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const exportQuestions = () => {
    if (!questions) return;
    
    const content = `
INTERVIEW QUESTIONS
${jobTitle} at ${company}

TECHNICAL QUESTIONS:
${questions.technical?.map((q, i) => `${i + 1}. ${q}`).join('\n') || 'None'}

BEHAVIORAL QUESTIONS:
${questions.behavioral?.map((q, i) => `${i + 1}. ${q}`).join('\n') || 'None'}

SITUATIONAL QUESTIONS:
${questions.situational?.map((q, i) => `${i + 1}. ${q}`).join('\n') || 'None'}

Generated by Elevatr AI
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${jobTitle.replace(/[^a-z0-9]/gi, '_')}_Interview_Questions.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div 
      className={`fixed inset-0 z-50 transition-all duration-300 ${
        isVisible 
          ? 'bg-black/70 backdrop-blur-sm opacity-100' 
          : 'bg-black/0 opacity-0 pointer-events-none'
      }`}
      onClick={handleBackdropClick}
    >
      <div className="flex items-center justify-center min-h-screen p-4">
        <div 
          className={`bg-white rounded-3xl max-w-5xl w-full max-h-[95vh] overflow-hidden shadow-2xl transform transition-all duration-300 ${
            isVisible 
              ? 'scale-100 translate-y-0 opacity-100' 
              : 'scale-95 translate-y-4 opacity-0'
          }`}
          onClick={(e) => e.stopPropagation()}
        >
          
          {/* Enhanced Header */}
          <div className="relative overflow-hidden">
            <div className="bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 text-white p-8">
              <div className="absolute inset-0 bg-gradient-to-r from-white/10 to-transparent"></div>
              <button
                onClick={handleClose}
                className="absolute top-6 right-6 text-white/70 hover:text-white hover:bg-white/20 rounded-full p-2 transition-all duration-200 z-10"
                aria-label="Close modal"
              >
                <XMarkIcon className="h-6 w-6" />
              </button>
              
              <div className="relative pr-16">
                <div className="flex items-center mb-4">
                  <div className="w-14 h-14 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mr-4 shadow-lg">
                    <SparklesIcon className="w-8 h-8 text-white" />
                  </div>
                  <div>
                    <h2 className="text-3xl font-bold mb-1">AI Interview Questions</h2>
                    <p className="text-white/80 text-lg font-medium">{jobTitle || 'Job Position'}</p>
                  </div>
                </div>
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-white/60 rounded-full mr-2"></div>
                  <p className="text-white/90 text-lg">{company || 'Company'}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Enhanced Content */}
          <div className="p-8 max-h-[calc(95vh-200px)] overflow-y-auto">
            {loading ? (
              <div className="flex flex-col items-center justify-center py-20">
                <div className="relative mb-8">
                  <div className="w-20 h-20 border-4 border-blue-100 border-t-blue-600 rounded-full animate-spin"></div>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <SparklesIcon className="w-8 h-8 text-blue-600" />
                  </div>
                </div>
                <div className="text-center">
                  <h3 className="text-2xl font-bold text-gray-800 mb-3">Generating Questions...</h3>
                  <p className="text-gray-600 text-lg max-w-md mx-auto leading-relaxed">
                    Our AI is analyzing the job requirements and creating personalized interview questions tailored for you.
                  </p>
                  <div className="flex items-center justify-center mt-6 space-x-2">
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse delay-75"></div>
                    <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse delay-150"></div>
                  </div>
                </div>
              </div>
            ) : questions ? (
              <>
                {/* Enhanced Tabs */}
                <div className="mb-8">
                  <div className="grid grid-cols-3 gap-3 p-2 bg-gray-50 rounded-2xl">
                    {tabs.map((tab) => (
                      <button
                        key={tab.id}
                        onClick={() => setActiveTab(tab.id)}
                        className={`group relative p-4 rounded-xl font-semibold text-sm transition-all duration-200 ${getTabStyle(tab.id, tab.color)}`}
                      >
                        <div className="flex items-center justify-center mb-2">
                          <span className="text-2xl mr-2">{tab.icon}</span>
                          <span className="font-bold">{tab.name}</span>
                        </div>
                        <p className="text-xs opacity-75 mb-1">{tab.description}</p>
                        <span className="inline-flex items-center justify-center w-6 h-6 bg-current/20 rounded-full text-xs font-bold">
                          {questions[tab.id]?.length || 0}
                        </span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Enhanced Questions Display */}
                <div className="mb-8">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-xl font-bold text-gray-800 capitalize">
                      {activeTab} Questions
                    </h3>
                    <div className="flex items-center space-x-3">
                      <button
                        onClick={exportQuestions}
                        className="flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-medium text-sm transition-all duration-200"
                      >
                        <ClipboardDocumentIcon className="w-4 h-4 mr-2" />
                        Export All
                      </button>
                      <button
                        onClick={() => window.print()}
                        className="flex items-center px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-xl font-medium text-sm transition-all duration-200"
                      >
                        <PrinterIcon className="w-4 h-4 mr-2" />
                        Print
                      </button>
                    </div>
                  </div>

                  <div className="max-h-[400px] overflow-y-auto pr-2 space-y-4">
                    {questions[activeTab]?.map((question, index) => (
                      <div 
                        key={index} 
                        className="group bg-gradient-to-r from-gray-50 to-gray-50/50 hover:from-blue-50 hover:to-purple-50/50 rounded-2xl p-6 border border-gray-200 hover:border-blue-200 transition-all duration-200 hover:shadow-md"
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start flex-1">
                            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-4 flex-shrink-0 shadow-lg">
                              <span className="text-white font-bold text-sm">{index + 1}</span>
                            </div>
                            <div className="flex-1">
                              <p className="text-gray-800 leading-relaxed text-lg font-medium">
                                {question}
                              </p>
                            </div>
                          </div>
                          
                          <button
                            onClick={() => copyQuestion(question, index)}
                            className="ml-4 opacity-0 group-hover:opacity-100 flex items-center justify-center w-8 h-8 bg-white hover:bg-gray-50 border border-gray-200 rounded-lg transition-all duration-200 shadow-sm"
                            title="Copy question"
                          >
                            {copiedIndex === index ? (
                              <span className="text-green-500 text-xs font-bold">✓</span>
                            ) : (
                              <ClipboardDocumentIcon className="w-4 h-4 text-gray-500" />
                            )}
                          </button>
                        </div>
                      </div>
                    )) || []}
                  </div>
                </div>

                {/* Enhanced Footer */}
                <div className="border-t border-gray-200 pt-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-6">
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-gradient-to-r from-green-400 to-green-500 rounded-full mr-3"></div>
                        <span className="text-gray-600 font-medium">
                          Questions generated by AI
                        </span>
                      </div>
                      <div className="flex items-center">
                        <BookmarkIcon className="w-4 h-4 text-gray-400 mr-2" />
                        <span className="text-gray-500 text-sm">
                          Use as practice guidance
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <span className="text-sm text-gray-500">
                        Total: {(questions.technical?.length || 0) + (questions.behavioral?.length || 0) + (questions.situational?.length || 0)} questions
                      </span>
                    </div>
                  </div>
                </div>
              </>
            ) : (
              <div className="text-center py-20">
                <div className="w-20 h-20 bg-red-50 border-4 border-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <XMarkIcon className="w-10 h-10 text-red-500" />
                </div>
                <h3 className="text-2xl font-bold text-gray-800 mb-3">Unable to Generate Questions</h3>
                <p className="text-gray-600 text-lg mb-6 max-w-md mx-auto">
                  We encountered an issue while generating your interview questions. Please try again in a few moments.
                </p>
                <button
                  onClick={handleClose}
                  className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-medium transition-all duration-200"
                >
                  Close and Retry
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewQuestionsModal;